type: edu
custom_name: stage6
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.io.PrintWriter;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {

            String mode = "enc";
            int key = 0;
            String data = "";
            String fileInLocation = null;
            String fileOutLocation = null;

            for (int i = 0; i < args.length; i += 2) {
                switch (args[i]) {
                    case "-mode":
                        mode = args[i + 1];
                        break;
                    case "-key":
                        key = Integer.parseInt(args[i + 1]);
                        break;
                    case "-data":
                        data = args[i + 1];
                        break;
                    case "-in":
                        fileInLocation = args[i + 1];
                        break;
                    case "-out":
                        fileOutLocation = args[i + 1];
                        break;
                }
            }

            if (fileInLocation != null) {
                File f = new File(fileInLocation);
                try (Scanner scanner = new Scanner(f)) {
                    data = scanner.nextLine().trim();
                } catch (FileNotFoundException e) {
                    System.out.println("File not found");
                    return;
                }
            }

            Encrypt encrypt = new Encrypt(data);

            if (mode.equals("enc")) {
                encrypt.shift(key);
            } else if (mode.equals("dec")) {
                encrypt.unshift(key);
            }

            if (fileOutLocation == null) {
                System.out.println(encrypt.toString());
            } else {
                try (PrintWriter outFile = new PrintWriter(fileOutLocation)){
                    outFile.print(encrypt.toString());
                } catch (IOException e) {
                    System.out.println("IO file exception!");
                }
            }
        }
    }

    class Encrypt {
        private char[] sentence;
        private static String alphabet = "abcdefghijklmnopqrstuvwxyz";

        public Encrypt(String sentence) {
            this.sentence = sentence.toCharArray();
        }

        public void reverse() {
            for (int i = 0; i < this.sentence.length; i++) {
                if ((int)this.sentence[i] > 96 && (int)this.sentence[i] < 123)
                    this.sentence[i] = letterToReverse(this.sentence[i]);
            }
        }

        public void shift(int key) {
            for (int i = 0; i < this.sentence.length; i++) {
                this.sentence[i] += key;
            }
        }

        public void unshift(int key) {
            for (int i = 0; i < this.sentence.length; i++) {
                this.sentence[i] -= key;
            }
        }

        private char letterToReverse(char ch) {
            StringBuilder reversedAlphabet = new StringBuilder();
            for (int i = alphabet.length() - 1; i > 0; i--) {
                reversedAlphabet.append(alphabet.charAt(i));
            }
            return reversedAlphabet.charAt((int)ch - 97);
        }

        public void shiftOnlyInAplhabet(int key) {
            for (int i = 0; i < this.sentence.length; i++) {
                if ((int)this.sentence[i] > 96 && (int)this.sentence[i] < 123) {
                    this.sentence[i] = alphabet.charAt(((int)this.sentence[i] - 97 + key) % alphabet.length());
                }
            }
        }

        @Override
        public String toString() {
            StringBuilder s = new StringBuilder();

            for (char ch : sentence) {
                s.append(ch);
            }

            return s.toString();
        }
    }
  learner_created: true
- name: src/encryptdecrypt/protected.txt
  visible: true
  text: \jqhtrj%yt%m~ujwxpnqq&
  learner_created: true
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: true
- name: src/encryptdecrypt/road_to_treasure.txt
  visible: true
  text: Welcome to hyperskill!
  learner_created: true
- name: src/encryptdecrypt/output.txt
  visible: true
  learner_created: true
- name: src/encryptdecrypt/in.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/250/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/46/stages/250/implement">JetBrains
    Academy</a>
  time: Thu, 09 Jul 2020 10:40:53 UTC
record: -1
